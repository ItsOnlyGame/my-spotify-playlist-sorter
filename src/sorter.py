import time

import spotify_util


def fix_track_release_dates(tracks):
    """
    Fixes the release dates of tracks in playlist_tracks to be in the same format (YYYY-MM-DD). 

    Args:
        playlist_tracks (list): A list of spotify playlist tracks
    """
    for track in tracks:
        # Add a date if one doesn't exist
        if track['album']['release_date'] is None:
            track['album']['release_date'] = '1970-01-01'

        # Add month and date if those do not exist
        if len(track['album']['release_date'].split('-')) == 1:
            track['album']['release_date'] += '-01-01'
        elif len(track['album']['release_date'].split('-')) == 2:
            track['album']['release_date'] += '-01'


def remove_duplicate_tracks(tracks):
    unique_list = []

    for track in tracks:
        if track not in unique_list:
            unique_list.append(track)
            
    print(len(unique_list))
    return unique_list


def sort_tracks_into_keys(tracks):
    """
    Sorts the tracks from playlist_tracks into a map that is determined by the album and artist names.

    Args:
        playlist_tracks (_type_): List of spotify tracks in a playlist

    Raises:
        Exception: This will happen if the list contains a track where the artist name cannot be determined.

    Returns:
        dict: A dictionary generated by the function. This dictionary is in the format of dict[artist_key][album_key]
    """
    sorted_dict = {}
    for item in tracks:
        album_key = item['album']['name']

        # If track is a local track, use tracks artist as a key
        if item['is_local'] is True:
            artist_key = item['artists'][0]['name']

        # If track album is compilation, use album name as the artist
        elif item['album']['album_type'] == 'compilation':
            artist_key = item['album']['name']

        # If track album artist is named "Various Artists", use the first artist named in the track
        elif item['album']['artists'][0]['name'] == 'Various Artists':
            artist_key = item['artists'][0]['name']

        # If no edge cases are detected, use tracks album artist as a key
        else:
            artist_key = item['album']['artists'][0]['name']

        # Throw an exception if artist_key could not be determined.
        if artist_key is None:
            error_message = "artist_key is None, which should no be possible.\n"
            error_message += "Please create an issue at https://github.com/ItsOnlyGame/my-spotify-playlist-sorter/issues and paste this error message and other related details.\n"
            error_message += f"Track that caused the issue: {item['uri']}\n"
            raise Exception(error_message)

        # Initialize dictionary based on playlist track data
        if artist_key not in sorted_dict.keys():
            sorted_dict[artist_key] = {}
        if album_key not in sorted_dict[artist_key].keys():
            sorted_dict[artist_key][album_key] = []

        sorted_dict[artist_key][album_key].append(item)
    
    return sorted_dict
        

def sort_albums(spotify, sorted_playlist):
    """
    Go through every artist and their albums to sort the tracks into their original order.
    Also sorts the albums of artist into their release date order.

    Notice: Ignores local tracks

    Args:
        spotify: Spotify instance
        sorted_playlist (dict): Dictionary in format of dict[artist_key][album_key]
    """
    # Go through every artist in the playlist
    for artist_key in sorted_playlist.keys():
        sorted_albums = []

        # Go through every album related to artist
        for album_key in sorted_playlist[artist_key].keys():
            # Put local tracks into the sorted list, no actual album to compare to.
            if sorted_playlist[artist_key][album_key][0]['is_local'] is True:
                sorted_albums += list(sorted_playlist[artist_key][album_key]).copy()
                continue

            # Sort tracks according to the actual album they are from
            album_spotify_id = sorted_playlist[artist_key][album_key][0]['album']['id']
            album_tracks = spotify.album_tracks(album_spotify_id)['items']

            # Loop through the fetched spotify playlist and the dictionary.
            # Add the tracks to the sorted list when it loops to the correct position.
            # Leftover tracks will be put into the sorted list
            other = list(sorted_playlist[artist_key][album_key]).copy()
            for sp_track in album_tracks:
                for track in sorted_playlist[artist_key][album_key]:
                    if sp_track['id'] == track['id']:
                        sorted_albums.append(track)
                        other.remove(track)
            sorted_albums += other

        # Sort the tracks based on albums release date and insert the sorted list to the dictionary
        sorted_albums.sort(key=lambda i: time.strptime(i['album']['release_date'], '%Y-%m-%d'))
        sorted_playlist[artist_key] = sorted_albums


def map_to_list(sorted_playlist: dict):
    """ From grouped dict to a list

    Args:
        sorted_playlist (dict): Playlist group to be transformed into a list

    Returns:
        list: Returns a list created from sorted_playlist
    """
    sorted_list = [track for album_list in sorted_playlist.values() for track in album_list]
    return sorted_list


def commit_sort(spotify, playlist_url, playlist_items, sorted_playlist_items):
    """
    Commits changes from sorted_playlist_items into playlist identified by playlist_url.

    Args:
        spotify: Spotify instance
        playlist_url: URL of the playlist that is going to be sorted
        playlist_items: Original playlist items
        sorted_playlist_items: Sorted playlist items
    """
    snapshot = None
            
    for j in range(0, len(sorted_playlist_items) - 1):
        if playlist_items[j]['track']['uri'] != sorted_playlist_items[j]['track']['uri']:
            for i, t1 in enumerate(playlist_items):
                if t1['track']['uri'] == sorted_playlist_items[j]['track']['uri']:
                    if snapshot is None:
                        response = spotify.playlist_reorder_items(playlist_url, range_start=i, insert_before=j)
                        snapshot = response['snapshot_id']
                        playlist_items.insert(j, playlist_items.pop(i))
                    else:
                        response = spotify.playlist_reorder_items(playlist_url, range_start=i, insert_before=j, snapshot_id=snapshot)
                        snapshot = response['snapshot_id']
                        playlist_items.insert(j, playlist_items.pop(i))
                    break


def sort_playlist(spotify, playlist):
    """
    ### Sorts the spotify playlist
    1. Artist added to playlist
    2. Album release date
    2. Replicates the album order found in the original album

    Args:
        spotify: Spotify instance
        playlist: Spotify playlist object
    """
    start_time = time.time()

    print("Fetching playlist items\n")
    playlist_url = playlist['external_urls']['spotify']
    playlist_items = spotify_util.get_playlist_items(spotify, playlist_url)

    print("Check for duplicates\n")
    unique_playlist_items = remove_duplicate_tracks(playlist_items)

    print("Fixing release dates to same format\n")
    fix_track_release_dates(unique_playlist_items)

    print("Grouping artists, albums and tracks together\n")
    keyed_playlist = sort_tracks_into_keys(unique_playlist_items)

    print("Sorting (this might take a while depending on the size of the playlist)\n")
    sort_albums(spotify, keyed_playlist)

    print("Creating a list of sorted tracks\n")
    playlist_items_list = map_to_list(keyed_playlist)

    print("Committing changes to playlist\n")
    commit_sort(spotify, playlist_url, playlist_items, playlist_items_list)

    timer = (time.time() - start_time)
    print(f"Done (took {timer} seconds)")