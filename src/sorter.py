from sys import argv
import time

import spotify_util


def fix_track_release_dates(sortable_list):
    """
    Fixes the release dates of tracks in playlist_tracks to be in the same format (YYYY-MM-DD). 

    Args:
        sortable_list (list): A list of spotify playlist tracks
    """
    for track in sortable_list:
        # Add a date if one doesn't exist
        if track['album']['release_date'] is None:
            track['album']['release_date'] = '1970-01-01'

        # Add month and date if those do not exist
        if len(track['album']['release_date'].split('-')) == 1:
            track['album']['release_date'] += '-01-01'
        elif len(track['album']['release_date'].split('-')) == 2:
            track['album']['release_date'] += '-01'


def remove_duplicate_tracks(spotify, playlist_url):
    """
    Removes duplicate tracks from the playlist.

    Args:
        spotify (list): Spotify instance
        playlist_url (list): Playlist URL
        original_playlist (list): List of spotify tracks in a playlist
    """
    original_playlist = spotify_util.get_playlist_items(spotify, playlist_url)
    
    unique_track_uris = set()    
    tracks_to_trash = []
    
    for index, track in enumerate(original_playlist):
        if track is None:
            continue
        
        track_uri = track['uri']
        if track_uri not in unique_track_uris:
            unique_track_uris.add(track_uri)
        else:
            tracks_to_trash.append({
                "uri": track_uri,
                "positions": [index]
            })

    if "--debug" not in argv:
        response = spotify.playlist_remove_specific_occurrences_of_items(playlist_url, tracks_to_trash)
        return response['snapshot_id']


def sort_playlist_into_dict(sortable_list):
    """
    Sorts the tracks from playlist_tracks into a map that is determined by the album and artist names.

    Args:
        sortable_list (list): List of spotify tracks in a playlist

    Raises:
        Exception: This will happen if the list contains a track where the artist name cannot be determined.

    Returns:
        dict: A dictionary generated by the function. This dictionary is in the format of dict[artist_key][album_key]
    """
    sorted_dict = {}
    for item in sortable_list:
        album_key = item['album']['name']

        # If track is a local track, use tracks artist as a key
        if item['is_local'] is True:
            artist_key = item['artists'][0]['name']

        # If track album is compilation, use album name as the artist
        elif item['album']['album_type'] == 'compilation':
            artist_key = item['album']['name']

        # If track album artist is named "Various Artists", use the first artist named in the track
        elif item['album']['artists'][0]['name'] == 'Various Artists':
            artist_key = item['artists'][0]['name']

        # If no edge cases are detected, use tracks album artist as a key
        else:
            artist_key = item['album']['artists'][0]['name']

        # Throw an exception if artist_key could not be determined.
        if artist_key is None:
            error_message = "artist_key is None, which should no be possible.\n"
            error_message += "Please create an issue at https://github.com/ItsOnlyGame/my-spotify-playlist-sorter/issues and paste this error message and other related details.\n"
            error_message += f"Track that caused the issue: {item['uri']}\n"
            raise Exception(error_message)

        # Initialize dictionary based on playlist track data
        if artist_key not in sorted_dict.keys():
            sorted_dict[artist_key] = {}
        if album_key not in sorted_dict[artist_key].keys():
            sorted_dict[artist_key][album_key] = []

        sorted_dict[artist_key][album_key].append(item)
    
    return sorted_dict
        

def sort_albums(spotify, sortable_dict):
    """
    Go through every artist and their albums to sort the tracks into their original order.
    Also sorts the albums of artist into their release date order.

    Notice: Ignores local tracks

    Args:
        spotify: Spotify instance
        sortable_dict (dict): Dictionary in format of dict[artist_key][album_key]
    """
    # Go through every artist in the playlist
    for artist_key in sortable_dict.keys():
        sorted_albums = []

        # Go through every album related to artist
        for album_key in sortable_dict[artist_key].keys():
            # Put invalid tracks into the sorted list, nothing to compare to.
            if artist_key == "invalid" or album_key == "invalid":
                sorted_albums += list(sortable_dict[artist_key][album_key]).copy()
                continue
            
            # Put local tracks into the sorted list, no actual album to compare to.
            if sortable_dict[artist_key][album_key][0]['is_local'] is True:
                sorted_albums += list(sortable_dict[artist_key][album_key]).copy()
                continue

            # Sort tracks according to the actual album they are from
            album_spotify_id = sortable_dict[artist_key][album_key][0]['album']['id']
            album_tracks = spotify.album_tracks(album_spotify_id)['items']

            # Loop through the fetched spotify playlist and the dictionary.
            # Add the tracks to the sorted list when it loops to the correct position.
            # Leftover tracks will be put into the sorted list
            other = list(sortable_dict[artist_key][album_key]).copy()
            for sp_track in album_tracks:
                for track in sortable_dict[artist_key][album_key]:
                    if sp_track['id'] == track['id']:
                        sorted_albums.append(track)
                        other.remove(track)
            sorted_albums += other

        # Sort the tracks based on albums release date and insert the sorted list to the dictionary
        sorted_albums.sort(key=lambda i: time.strptime(i['album']['release_date'], '%Y-%m-%d'))
        sortable_dict[artist_key] = sorted_albums


def playlist_dict_to_list(sorted_playlist: dict):
    """ From grouped dict to a list

    Args:
        sorted_playlist (dict): Playlist group to be transformed into a list

    Returns:
        list: Returns a list created from sorted_playlist
    """
    sorted_list = [track for album_list in sorted_playlist.values() for track in album_list]
    return sorted_list


def commit_sort(spotify, playlist_url, original_playlist, sorted_playlist, snapshot_id=None):
    """
    Commits changes from sorted_playlist_items into playlist identified by playlist_url.

    Args:
        spotify: Spotify instance
        playlist_url: URL of the playlist that is going to be sorted
        original_playlist: Original playlist items
        sorted_playlist: Sorted playlist items
    """                
    for j in range(0, len(sorted_playlist) - 1):
        if original_playlist[j]['uri'] == sorted_playlist[j]['uri']:
            continue
        
        for i, t1 in enumerate(original_playlist):
            if t1['uri'] is not sorted_playlist[j]['uri']:
                continue
            
            if snapshot_id is None:
                response = spotify.playlist_reorder_items(playlist_url, range_start=i, insert_before=j)
                snapshot_id = response['snapshot_id']
                original_playlist.insert(j, original_playlist.pop(i))
            else:
                response = spotify.playlist_reorder_items(playlist_url, range_start=i, insert_before=j, snapshot_id=snapshot_id)
                snapshot_id = response['snapshot_id']
                original_playlist.insert(j, original_playlist.pop(i))
            break


def log_list(sorted_playlist):
    """
    Print the playlist to the console

    Args:
        sorted_playlist: Sorted playlist items
    """            
    for i in range(0, len(sorted_playlist)):
        print(f"{i + 1}. {sorted_playlist[i]['artists'][0]['name']} - {sorted_playlist[i]['name']}")
    

def sort_playlist(spotify, playlist):
    """
    ### Sorts the spotify playlist
    1. Artist added to playlist
    2. Album release date
    2. Replicates the album order found in the original album

    Args:
        spotify: Spotify instance
        playlist: Spotify playlist object
    """
    start_time = time.time()

    print("Fetching playlist items\n")
    playlist_url = playlist['external_urls']['spotify']
    
    print("Remove duplicates from playlist\n")
    playlist_snapshot_id = remove_duplicate_tracks(spotify, playlist_url)

    original_playlist = spotify_util.get_playlist_items(spotify, playlist_url)
    sortable_list = original_playlist.copy()

    print("Fixing release dates to same format\n")
    fix_track_release_dates(sortable_list)

    print("Grouping artists, albums and tracks together\n")
    sortable_dict = sort_playlist_into_dict(sortable_list)

    print("Sorting (this might take a while depending on the size of the playlist)\n")
    sort_albums(spotify, sortable_dict)

    print("Creating a list of sorted tracks\n")
    sorted_playlist = playlist_dict_to_list(sortable_dict)

    if "--debug" not in argv:
        print("Committing changes to playlist\n")
        commit_sort(spotify, playlist_url, original_playlist, sorted_playlist, playlist_snapshot_id)
    else:
        print("Log playlist\n")
        log_list(sorted_playlist)

    timer = (time.time() - start_time)
    print(f"Done (took {timer} seconds)")